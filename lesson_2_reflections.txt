What happens when you initialize a repository? Why do you need to do it?
- creates an empty git repository so I can start making commits

How is the staging area different from the working directory and the repository? What value do you think it offers?
- The staging area lets you make commits for at least one logical change. A commit that isn't too big. After committing all files, they all go in the repository. 

How can you use the staging area to make sure you have one commit per logical change?
- run git diff --staged to see the differences between the repo and staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- Adding a new experimental feature. Adding a branch for it well prevent it from messing with your master branch. If you don't like the change, you can checkout back to master.

How do the diagrams help you visualize the branch structure?
- You can tell which branches have what commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- Adds all the code from both branches into one file. The branch branches out but when it merges, it connects back to the branch you are merging it to.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
- If git automatically merges, it will have to figure out which code to keep and which to delete, if it finds a conflict. It's better to figure that out with the person who runs the other branch.